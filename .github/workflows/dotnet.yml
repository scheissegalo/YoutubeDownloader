name: Build and Release

on:
  push:
    branches:
      - master  # Adjust this as necessary, e.g., to tags instead of main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0'  # Specify your .NET version here

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish --configuration Release --no-restore --output publish/
        
      - name: Archive production artifacts
        run: |
          tar -cvzf YoutubeDownloader.tar.gz -C publish/ YoutubeDownloader
      
      - name: Calculate Next Version
        id: calculate_version
        run: |
          # Fetch tags from the repository
          git fetch --tags
          
          # Get the latest tag from Git
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          
          # If there's no tag yet, start with 1.0.0
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found. Starting with 1.0.0"
            LATEST_TAG="1.0.0"
          fi
          
          # Split the tag into major, minor, and patch
          IFS='.' read -ra VERSION <<< "$LATEST_TAG"
          MAJOR=${VERSION[0]}
          MINOR=${VERSION[1]}
          PATCH=${VERSION[2]}
          
          # Increment the patch version
          PATCH=$((PATCH+1))
          
          # Combine them back
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEXT_VERSION"
          
          # Set the next version as an output variable
          echo "::set-output name=next_version::$NEXT_VERSION"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PERSONAL_TOKEN }}  # Setting the environment variable for authentication
        with:
          tag_name: ${{ steps.calculate_version.outputs.next_version }}
          release_name: Release ${{ steps.calculate_version.outputs.next_version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PERSONAL_TOKEN }}  # Ensure this step also uses the PAT for authentication
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./YoutubeDownloader.tar.gz
          asset_name: YoutubeDownloader.tar.gz
          asset_content_type: application/gzip
